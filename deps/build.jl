using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcddgmp"], :libcddgmp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPolyhedra/cddlibBuilder/releases/download/v0.94.0-j-2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.0-j+.aarch64-linux-gnu.tar.gz", "c15586dc50b4d88cfd75b8e02a429b5dc023ef06de66a16dfa82f97a5004ace4"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/cddlib.v0.94.0-j+.aarch64-linux-musl.tar.gz", "a7848421682dcc9d04dcf14bf721681285611a7c7cdb2a74f4223fd0b34d9c29"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/cddlib.v0.94.0-j+.arm-linux-gnueabihf.tar.gz", "a06e5b701a739861d2aec3e764aba46d42287afdd55ba20149e78f3176808505"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/cddlib.v0.94.0-j+.arm-linux-musleabihf.tar.gz", "78e1c2f9f34896ab062b6624d81e11996017d1346ec6fe04d8f364340b3d4fd3"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.0-j+.i686-linux-gnu.tar.gz", "6aa7ce61834343e7ae0f1d4826aa62f0251a8861ca7b6810ef87455152805e62"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/cddlib.v0.94.0-j+.i686-linux-musl.tar.gz", "20e106011bd2c855e22217f2108ea511e28c1738db375ecb9d09778fe531de0a"),
    Windows(:i686) => ("$bin_prefix/cddlib.v0.94.0-j+.i686-w64-mingw32.tar.gz", "dd7f75dc0e8157e537de5a27c021432b20336b40b3c745cbf476f7f3fba3af63"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.0-j+.powerpc64le-linux-gnu.tar.gz", "94c2fdac00fbf3ca884366e4675dd064d594d99498155e582fd900ae32cf5471"),
    MacOS(:x86_64) => ("$bin_prefix/cddlib.v0.94.0-j+.x86_64-apple-darwin14.tar.gz", "97d68e5da574e01560e377cbad4a0a4aa99a1a869accec8ec2b30dc119cd1bad"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.0-j+.x86_64-linux-gnu.tar.gz", "50ab518015f976de55df77f88a11b112b65f799b0162c6c8e064527edcada4c9"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/cddlib.v0.94.0-j+.x86_64-linux-musl.tar.gz", "a1d7cdce84fd077d9ab2bb04c25d53f1b85c81dd16f598db257300b4c0f03847"),
    FreeBSD(:x86_64) => ("$bin_prefix/cddlib.v0.94.0-j+.x86_64-unknown-freebsd11.1.tar.gz", "fc3386926faa44ed4887504703ec9ee9a4b4f765f30cac18b8da0ef716aaec0b"),
    Windows(:x86_64) => ("$bin_prefix/cddlib.v0.94.0-j+.x86_64-w64-mingw32.tar.gz", "924f84d29e5e7329532398779a4e4503a39f86be43c6745e836c67a91bbe5a8a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
