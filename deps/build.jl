using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcddgmp"], :libcddgmp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/benlorenz/cddlibBuilder/releases/download/v0.94.0-j"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.0-j.aarch64-linux-gnu.tar.gz", "4877d82cf47362f7a0d3c88151e82212d1509ee5b9004e19136530acb57e3994"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/cddlib.v0.94.0-j.aarch64-linux-musl.tar.gz", "405defcde36a30b189312cdc3770f983b3f24dad9e44b2632a5d176b08bbc0f4"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/cddlib.v0.94.0-j.arm-linux-gnueabihf.tar.gz", "e36029ae0139d8c626da5e2630107eb1450901672aad5a647c135fe3aef71e90"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/cddlib.v0.94.0-j.arm-linux-musleabihf.tar.gz", "b7e27849164180a4364556d8f10c1dd75b391e568cc15973a76506742401a2d0"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.0-j.i686-linux-gnu.tar.gz", "56813d00ad6e136fc9f27169944f61043a814424810229f1b245187dc4f3c5d7"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/cddlib.v0.94.0-j.i686-linux-musl.tar.gz", "b68b9b783f1b0242b70a74e63e4e2f576bc4ee43ab589f0961972761a8c75176"),
    Windows(:i686) => ("$bin_prefix/cddlib.v0.94.0-j.i686-w64-mingw32.tar.gz", "82f4c0f55b7b424cc3be39eaed0fe1cebd5ffaa9f734fc1ac290f3e8ea98ee0a"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.0-j.powerpc64le-linux-gnu.tar.gz", "3f7f1c1f706d8e29a7d83dcdb3e853e55d5a1a76d1203e52e97837b6849b5381"),
    MacOS(:x86_64) => ("$bin_prefix/cddlib.v0.94.0-j.x86_64-apple-darwin14.tar.gz", "5305dddf8d1920ed4c12e5c6105b1ef0f739944a215722857bd547a97241f390"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.0-j.x86_64-linux-gnu.tar.gz", "08b5f98747cbb4d55937a93b2ec4c73f0855b7b6842955ab64a4f9b4d674279c"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/cddlib.v0.94.0-j.x86_64-linux-musl.tar.gz", "572725d67e4301195a15b459f84b0fcfaaedd7b27a6b0e9812e71c4ff29df8c7"),
    FreeBSD(:x86_64) => ("$bin_prefix/cddlib.v0.94.0-j.x86_64-unknown-freebsd11.1.tar.gz", "63dfba16692431c3c658c61d8062b4faa709f87ba3b847eccf459b1a5bca68bd"),
    Windows(:x86_64) => ("$bin_prefix/cddlib.v0.94.0-j.x86_64-w64-mingw32.tar.gz", "d62865a5b6e14082065a01fe1772b9dff076fa2de42ff815c12b3872521d1899"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
